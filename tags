!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddInt	WPScore/[Token]selfplayer2.cpp	/^	void AddInt(std::vector <int> &v, unsigned long long x, int w)$/;"	f	namespace:Player
AddScore	WPScore/[Token]selfplayer.cpp	/^	void AddScore(TScore sc)$/;"	f	namespace:Player
AddStr	WPScore/[Token]selfplayer2.cpp	/^	void AddStr(std::vector <int> &v, std::string s)$/;"	f	namespace:Player
Alloc	WPScore/WPPersistentTree.h	/^		WPAllocator <WPMultinotePersistentTreeNode> *Alloc;$/;"	m	class:WPMultinotePersistentTree
Alloc	WPScore/WPPersistentTree.h	/^		WPAllocator <WPPropertyPersistentTreeNode> *Alloc;$/;"	m	class:WPPropertyPersistentTree
Allocate	WPScore/WPAllocator.h	/^template <class T> T *WPAllocator <T>::Allocate()$/;"	f	class:WPAllocator
Arg	WPScore/WPProperty.h	/^		std::string Arg;$/;"	m	class:WPProperty
BUFFER	WPScore/[Token]selfplayer2.cpp	215;"	d	file:
BUFFER	WPScore/[Token]selfplayer2.cpp	31;"	d	file:
Begin	WPScore/WPInterval.h	/^		WPPosition Begin, End;$/;"	m	class:WPInterval
Build	WPScore/[Token]selfplayer2.cpp	/^	std::vector <int> Build(double T, double F)$/;"	f	namespace:Player
CanPop	WPScore/[Token]selfplayer.cpp	/^	bool CanPop()$/;"	f	namespace:Player
ControlRate	core/WPTimbre.h	/^    const static double ControlRate = 480.0; \/\/Hertz$/;"	m	class:WPTimbre
CurVer	WPScore/WPScore.h	/^		int CurVer;$/;"	m	class:WPScore
DFS	WPScore/WPPersistentTree.cpp	/^void WPMultinotePersistentTree::DFS(WPMultinotePersistentTreeNode *T, std::vector <WPMultinote> &V)$/;"	f	class:WPMultinotePersistentTree
DFS	WPScore/WPPersistentTree.cpp	/^void WPPropertyPersistentTree::DFS(WPPropertyPersistentTreeNode *T, std::vector <WPProperty> &V)$/;"	f	class:WPPropertyPersistentTree
Element	WPScore/WPPersistentTree.h	/^		WPMultinote Element;$/;"	m	class:WPMultinotePersistentTreeNode
Element	WPScore/WPPersistentTree.h	/^		WPProperty Element;$/;"	m	class:WPPropertyPersistentTreeNode
End	WPScore/WPInterval.h	/^		WPPosition Begin, End;$/;"	m	class:WPInterval
FFT	core/WPWave.cpp	/^int WPWave::FFT(const Type *begin, const Type *end, QVector<std::complex<double> > &FFTout)$/;"	f	class:WPWave
FFT	core/WPWave.cpp	/^void WPWave::FFT()$/;"	f	class:WPWave
FFTdata	core/WPWave.h	/^    QVector<std::complex<double> > FFTdata;$/;"	m	class:WPWave
Fraction	WPScore/WPLib.cpp	/^Fraction::Fraction()$/;"	f	class:Fraction
Fraction	WPScore/WPLib.cpp	/^Fraction::Fraction(int A, int B)$/;"	f	class:Fraction
Fraction	WPScore/WPLib.h	/^class Fraction$/;"	c
GETMUSICINFODIALOG_H	getmusicinfodialog.h	2;"	d
Gabor	core/WPWave.cpp	/^void WPWave::Gabor(const Type *begin, const Type *end, double sigma, int period, QVector<QVector<std::complex<double> > > &out)$/;"	f	class:WPWave
Gabor	core/WPWave.cpp	/^void WPWave::Gabor(double sigma, int period)$/;"	f	class:WPWave
Gauss	core/WPWave.cpp	/^double WPWave::Gauss(double sigma, double x)$/;"	f	class:WPWave
GetNextScore	WPScore/[Token]selfplayer.cpp	/^	bool GetNextScore(std::ofstream &fin, TScore &sc)$/;"	f	namespace:Player
I	WPScore/WPAllocator.h	/^		long I, J;$/;"	m	class:WPAllocator
Initialize	WPScore/[Token]selfplayer.cpp	/^	void Initialize()$/;"	f	namespace:Player
Insert	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTreeNode *WPMultinotePersistentTree::Insert(WPMultinotePersistentTreeNode *&T, Fraction K, const WPMultinote &Item)$/;"	f	class:WPMultinotePersistentTree
Insert	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTreeNode *WPPropertyPersistentTree::Insert(WPPropertyPersistentTreeNode *&T, const WPProperty &Item)$/;"	f	class:WPPropertyPersistentTree
Instrument	WPScore/[Token]selfplayer.cpp	/^		std::string Instrument;$/;"	m	struct:Player::TScore	file:
Interval	WPScore/WPProperty.h	/^		WPInterval Interval;$/;"	m	class:WPProperty
IsToBePlayed	WPScore/WPPart.h	/^		bool IsToBePlayed;$/;"	m	class:WPPart
J	WPScore/WPAllocator.h	/^		long I, J;$/;"	m	class:WPAllocator
Ksigma	core/WPWave.h	/^    static const double Ksigma = 6.0;   \/\/The Gauss function is considered very small (as 0) if |x| > Ksigma * sigma$/;"	m	class:WPWave
Left	WPScore/WPPersistentTree.h	/^		WPMultinotePersistentTreeNode *Left, *Right;$/;"	m	class:WPMultinotePersistentTreeNode
Left	WPScore/WPPersistentTree.h	/^		WPPersistentTreeNode *Left, *Right;$/;"	m	class:WPPersistentTreeNode
Left	WPScore/WPPersistentTree.h	/^		WPPropertyPersistentTreeNode *Left, *Right;$/;"	m	class:WPPropertyPersistentTreeNode
Length	WPScore/WPNote.h	/^		Fraction Length;$/;"	m	class:WPNote
LessThanSplit	WPScore/WPPersistentTree.cpp	/^void WPPropertyPersistentTree::LessThanSplit(WPPropertyPersistentTreeNode *T, WPPropertyPersistentTreeNode *&X, WPPropertyPersistentTreeNode *&Y, WPPosition K)$/;"	f	class:WPPropertyPersistentTree
List	WPScore/WPMultinote.h	/^		std::vector <WPNote> List;$/;"	m	class:WPMultinote
MAINWINDOW_H	mainwindow.h	2;"	d
MPTNAlloc	WPScore/WPScore.h	/^		WPAllocator <WPMultinotePersistentTreeNode> MPTNAlloc;$/;"	m	class:WPScore
MUSICARCITEM_H	musicarcitem.h	2;"	d
MUSICBARITEM_H	musicbaritem.h	2;"	d
MUSICBRACKETITEM_H	musicbracketitem.h	2;"	d
MUSICDOTITEM_H	musicdotitem.h	2;"	d
MUSICLINEITEM_H	musiclineitem.h	2;"	d
MUSICSCENE_H	musicscene.h	2;"	d
MUSICTEXTITEM_H	musictextitem.h	2;"	d
MYGLWIDGET_H	myglwidget.h	2;"	d
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow()$/;"	f	class:MainWindow
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MapStack	WPScore/[Token]selfplayer.cpp	/^	std::map <std::string, TScore> MapStack;$/;"	m	namespace:Player	file:
Master	WPScore/WPPart.h	/^		WPScore *Master;$/;"	m	class:WPPart
MasterVer	WPScore/WPPart.h	/^		int MasterVer, MyVer;$/;"	m	class:WPPart
Memo	WPScore/WPAllocator.h	/^		std::vector <T *> Memo;$/;"	m	class:WPAllocator
Merge	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTreeNode *WPMultinotePersistentTree::Merge(WPMultinotePersistentTreeNode *&A, WPMultinotePersistentTreeNode *&B)$/;"	f	class:WPMultinotePersistentTree
Merge	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTreeNode *WPPropertyPersistentTree::Merge(WPPropertyPersistentTreeNode *&A, WPPropertyPersistentTreeNode *&B)$/;"	f	class:WPPropertyPersistentTree
MyGLWidget	myglwidget.cpp	/^MyGLWidget::MyGLWidget(QWidget *parent) :$/;"	f	class:MyGLWidget
MyGLWidget	myglwidget.h	/^class MyGLWidget : public QGLWidget$/;"	c
MyVer	WPScore/WPPart.h	/^		int MasterVer, MyVer;$/;"	m	class:WPPart
Names	WPScore/WPPart.h	/^		std::vector <std::string> Names;$/;"	m	class:WPPart
Notes	WPScore/WPPart.h	/^		std::vector <WPMultinotePersistentTree> Notes;$/;"	m	class:WPPart
OSCILLOSCOPEWINDOW_H	OscilloscopeWindow.h	2;"	d
Orders	WPScore/WPPart.h	/^		std::vector <int> Orders;$/;"	m	class:WPPart
OscilloscopeWindow	OscilloscopeWindow.cpp	/^OscilloscopeWindow::OscilloscopeWindow(QWidget *parent) :$/;"	f	class:OscilloscopeWindow
OscilloscopeWindow	OscilloscopeWindow.h	/^class OscilloscopeWindow : public QMainWindow$/;"	c
PI	core/WPWave.h	/^    static const double PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;$/;"	m	class:WPWave
PPTNAlloc	WPScore/WPScore.h	/^		WPAllocator <WPPropertyPersistentTreeNode> PPTNAlloc;$/;"	m	class:WPScore
Part	WPScore/[Token]selfplayer.cpp	/^		int Part;$/;"	m	struct:Player::TScore	file:
PartList	WPScore/WPScore.h	/^		std::vector <WPPart> PartList;$/;"	m	class:WPScore
Pitch	WPScore/WPNote.h	/^		int Pitch; \/\/\/ 0 = 440 Hz$/;"	m	class:WPNote
Player	WPScore/[Token]selfplayer.cpp	/^namespace Player$/;"	n	file:
Player	WPScore/[Token]selfplayer2.cpp	/^namespace Player$/;"	n	file:
PlayingPosition	WPScore/WPPart.h	/^		WPPosition PlayingPosition;$/;"	m	class:WPPart
Pop	WPScore/[Token]selfplayer.cpp	/^	void Pop()$/;"	f	namespace:Player
Priority	WPScore/WPPersistentTree.h	/^		int Priority;$/;"	m	class:WPMultinotePersistentTreeNode
Priority	WPScore/WPPersistentTree.h	/^		int Priority;$/;"	m	class:WPPropertyPersistentTreeNode
Properties	WPScore/WPPart.h	/^		std::vector <WPPropertyPersistentTree> Properties;$/;"	m	class:WPPart
PutEmpty	WPScore/[Token]selfplayer2.cpp	/^	void PutEmpty(double EndTime, double StartTime)$/;"	f	namespace:Player
PutPitch	WPScore/[Token]selfplayer2.cpp	/^	void PutPitch(double StartTime, double EndTime, double Freq)$/;"	f	namespace:Player
Recycle	WPScore/WPAllocator.h	/^template <class T> void WPAllocator <T>::Recycle()$/;"	f	class:WPAllocator
Rest	WPScore/WPNote.cpp	/^const int WPNote::Rest = -999999;$/;"	m	class:WPNote	file:
Rest	WPScore/WPNote.h	/^        static const int Rest;$/;"	m	class:WPNote
Right	WPScore/WPPersistentTree.h	/^		WPMultinotePersistentTreeNode *Left, *Right;$/;"	m	class:WPMultinotePersistentTreeNode
Right	WPScore/WPPersistentTree.h	/^		WPPersistentTreeNode *Left, *Right;$/;"	m	class:WPPersistentTreeNode
Right	WPScore/WPPersistentTree.h	/^		WPPropertyPersistentTreeNode *Left, *Right;$/;"	m	class:WPPropertyPersistentTreeNode
Root	WPScore/WPPersistentTree.h	/^		WPMultinotePersistentTreeNode *Root;$/;"	m	class:WPMultinotePersistentTree
Root	WPScore/WPPersistentTree.h	/^		WPPersistentTreeNode *Root;$/;"	m	class:WPPersistentTree
Root	WPScore/WPPersistentTree.h	/^		WPPropertyPersistentTreeNode *Root;$/;"	m	class:WPPropertyPersistentTree
Run	WPScore/[Token]selfplayer.cpp	/^	void Run(char *File)$/;"	f	namespace:Player
Run	WPScore/[Token]selfplayer2.cpp	/^	void Run()$/;"	f	namespace:Player
STFT	core/WPWave.cpp	/^void WPWave::STFT(const Type *begin, const Type *end, double *window, int width, int period, QVector<QVector<std::complex<double> > > &out)$/;"	f	class:WPWave
STFT	core/WPWave.cpp	/^void WPWave::STFT(double *window, int width, int period)$/;"	f	class:WPWave
STFTdata	core/WPWave.h	/^    QVector<QVector<std::complex<double> > > STFTdata;$/;"	m	class:WPWave
ScoreForce	WPScore/[Token]selfplayer.cpp	/^		int ScoreForce;$/;"	m	struct:Player::TScore	file:
ScoreFreq	WPScore/[Token]selfplayer.cpp	/^		double ScoreFreq;$/;"	m	struct:Player::TScore	file:
ScoreHigh	WPScore/[Token]selfplayer.cpp	/^		int ScoreHigh;$/;"	m	struct:Player::TScore	file:
ScoreLen	WPScore/[Token]selfplayer.cpp	/^		TFrac ScoreLen;$/;"	m	struct:Player::TScore	file:
ScoreType	WPScore/[Token]selfplayer.cpp	/^		int ScoreType;$/;"	m	struct:Player::TScore	file:
SingleRotateWithLeft	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTreeNode *WPMultinotePersistentTree::SingleRotateWithLeft(WPMultinotePersistentTreeNode *&T)$/;"	f	class:WPMultinotePersistentTree
SingleRotateWithLeft	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTreeNode *WPPropertyPersistentTree::SingleRotateWithLeft(WPPropertyPersistentTreeNode *&T)$/;"	f	class:WPPropertyPersistentTree
SingleRotateWithRight	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTreeNode *WPMultinotePersistentTree::SingleRotateWithRight(WPMultinotePersistentTreeNode *&T)$/;"	f	class:WPMultinotePersistentTree
SingleRotateWithRight	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTreeNode *WPPropertyPersistentTree::SingleRotateWithRight(WPPropertyPersistentTreeNode *&T)$/;"	f	class:WPPropertyPersistentTree
Size	WPScore/WPPersistentTree.h	/^		int Size;$/;"	m	class:WPMultinotePersistentTreeNode
Size	WPScore/WPPersistentTree.h	/^		int Size;$/;"	m	class:WPPropertyPersistentTreeNode
Split	WPScore/WPPersistentTree.cpp	/^void WPMultinotePersistentTree::Split(WPMultinotePersistentTreeNode *T, WPMultinotePersistentTreeNode *&X, WPMultinotePersistentTreeNode *&Y, Fraction K)$/;"	f	class:WPMultinotePersistentTree
Staccato	WPScore/WPProperty.h	/^			Staccato$/;"	e	enum:WPProperty::WPPropertyType
Sum	WPScore/WPPersistentTree.h	/^		Fraction Sum;$/;"	m	class:WPMultinotePersistentTreeNode
TFrac	WPScore/[Token]selfplayer.cpp	/^	struct TFrac$/;"	s	namespace:Player	file:
TScore	WPScore/[Token]selfplayer.cpp	/^	struct TScore$/;"	s	namespace:Player	file:
Type	WPScore/WPProperty.h	/^		WPPropertyType Type;$/;"	m	class:WPProperty
Ui	OscilloscopeWindow.h	/^namespace Ui {$/;"	n
Update	WPScore/WPPersistentTree.cpp	/^void WPMultinotePersistentTreeNode::Update()$/;"	f	class:WPMultinotePersistentTreeNode
Update	WPScore/WPPersistentTree.cpp	/^void WPPropertyPersistentTreeNode::Update()$/;"	f	class:WPPropertyPersistentTreeNode
Value	WPScore/WPPosition.h	/^		Fraction Value;$/;"	m	class:WPPosition
VerLink	WPScore/WPScore.h	/^		std::vector < std::pair <int, int> > VerLink;$/;"	m	class:WPScore
VerMap	WPScore/WPPart.h	/^		std::map <int, int> VerMap;$/;"	m	class:WPPart
WPAllocator	WPScore/WPAllocator.h	/^template <class T> WPAllocator <T>::WPAllocator()$/;"	f	class:WPAllocator
WPAllocator	WPScore/WPAllocator.h	/^template <class T> class WPAllocator$/;"	c
WPInterval	WPScore/WPInterval.cpp	/^WPInterval::WPInterval()$/;"	f	class:WPInterval
WPInterval	WPScore/WPInterval.cpp	/^WPInterval::WPInterval(const WPPosition &X, const WPPosition &Y)$/;"	f	class:WPInterval
WPInterval	WPScore/WPInterval.h	/^class WPInterval$/;"	c
WPMIXER_H	core/WPMixer.h	2;"	d
WPMixer	core/WPMixer.cpp	/^WPMixer::WPMixer(QObject *parent) :$/;"	f	class:WPMixer
WPMixer	core/WPMixer.h	/^class WPMixer : public QObject$/;"	c
WPMultinote	WPScore/WPMultinote.cpp	/^WPMultinote::WPMultinote()$/;"	f	class:WPMultinote
WPMultinote	WPScore/WPMultinote.cpp	/^WPMultinote::WPMultinote(const WPNote &Nt)$/;"	f	class:WPMultinote
WPMultinote	WPScore/WPMultinote.h	/^class WPMultinote$/;"	c
WPMultinotePersistentTree	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTree::WPMultinotePersistentTree(WPAllocator <WPMultinotePersistentTreeNode> *A)$/;"	f	class:WPMultinotePersistentTree
WPMultinotePersistentTree	WPScore/WPPersistentTree.h	/^class WPMultinotePersistentTree$/;"	c
WPMultinotePersistentTreeNode	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTreeNode::WPMultinotePersistentTreeNode()$/;"	f	class:WPMultinotePersistentTreeNode
WPMultinotePersistentTreeNode	WPScore/WPPersistentTree.h	/^class WPMultinotePersistentTreeNode$/;"	c
WPNote	WPScore/WPNote.cpp	/^WPNote::WPNote ()$/;"	f	class:WPNote
WPNote	WPScore/WPNote.cpp	/^WPNote::WPNote (const int &P, const Fraction &L)$/;"	f	class:WPNote
WPNote	WPScore/WPNote.h	/^class WPNote$/;"	c
WPOSCILLOSCOPE_H	core/WPOscilloscope.h	2;"	d
WPOscilloscope	core/WPOscilloscope.cpp	/^WPOscilloscope::WPOscilloscope(QWidget *parent) :$/;"	f	class:WPOscilloscope
WPOscilloscope	core/WPOscilloscope.h	/^class WPOscilloscope : public QGLWidget$/;"	c
WPPIPE_H	core/WPPipe.h	2;"	d
WPPart	WPScore/WPPart.cpp	/^WPPart::WPPart (WPScore *M)$/;"	f	class:WPPart
WPPart	WPScore/WPPart.cpp	/^WPPart::WPPart (WPScore *M, const std::string &S)$/;"	f	class:WPPart
WPPart	WPScore/WPPart.h	/^class WPPart$/;"	c
WPPersistentTree	WPScore/WPPersistentTree.cpp	/^WPPersistentTree::WPPersistentTree()$/;"	f	class:WPPersistentTree
WPPersistentTree	WPScore/WPPersistentTree.h	/^class WPPersistentTree$/;"	c
WPPersistentTreeNode	WPScore/WPPersistentTree.h	/^class WPPersistentTreeNode$/;"	c
WPPipe	core/WPPipe.cpp	/^WPPipe::WPPipe(QObject *parent) :$/;"	f	class:WPPipe
WPPipe	core/WPPipe.cpp	/^WPPipe::WPPipe(qint64 _def, qint64 _suf, QObject *parent) :$/;"	f	class:WPPipe
WPPipe	core/WPPipe.h	/^class WPPipe : public QIODevice$/;"	c
WPPosition	WPScore/WPPosition.cpp	/^WPPosition::WPPosition()$/;"	f	class:WPPosition
WPPosition	WPScore/WPPosition.cpp	/^WPPosition::WPPosition(const Fraction &Q)$/;"	f	class:WPPosition
WPPosition	WPScore/WPPosition.h	/^class WPPosition$/;"	c
WPProperty	WPScore/WPProperty.cpp	/^WPProperty::WPProperty()$/;"	f	class:WPProperty
WPProperty	WPScore/WPProperty.cpp	/^WPProperty::WPProperty(const WPInterval &I, const WPPropertyType &T, const std::string &S)$/;"	f	class:WPProperty
WPProperty	WPScore/WPProperty.h	/^class WPProperty$/;"	c
WPPropertyPersistentTree	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTree::WPPropertyPersistentTree(WPAllocator <WPPropertyPersistentTreeNode> *A)$/;"	f	class:WPPropertyPersistentTree
WPPropertyPersistentTree	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTree::WPPropertyPersistentTree(WPAllocator <WPPropertyPersistentTreeNode> *A, WPPropertyPersistentTreeNode *R)$/;"	f	class:WPPropertyPersistentTree
WPPropertyPersistentTree	WPScore/WPPersistentTree.h	/^class WPPropertyPersistentTree$/;"	c
WPPropertyPersistentTreeNode	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTreeNode::WPPropertyPersistentTreeNode()$/;"	f	class:WPPropertyPersistentTreeNode
WPPropertyPersistentTreeNode	WPScore/WPPersistentTree.h	/^class WPPropertyPersistentTreeNode$/;"	c
WPPropertyType	WPScore/WPProperty.h	/^		enum WPPropertyType$/;"	g	class:WPProperty
WPSYNTHESISCONTROLLER_H	core/WPSynthesisController.h	2;"	d
WPSYNTHESIZER_H	core/WPSynthesizer.h	2;"	d
WPScore	WPScore/WPScore.cpp	/^WPScore::WPScore()$/;"	f	class:WPScore
WPScore	WPScore/WPScore.h	/^class WPScore$/;"	c
WPSynthesisController	core/WPSynthesisController.cpp	/^WPSynthesisController::WPSynthesisController(QObject *parent) :$/;"	f	class:WPSynthesisController
WPSynthesisController	core/WPSynthesisController.h	/^class WPSynthesisController : public QObject$/;"	c
WPSynthesizer	core/WPSynthesizer.cpp	/^WPSynthesizer::WPSynthesizer(QObject *parent) :$/;"	f	class:WPSynthesizer
WPSynthesizer	core/WPSynthesizer.cpp	/^WPSynthesizer::WPSynthesizer(WPTimbre *_timbre, QObject *parent) :$/;"	f	class:WPSynthesizer
WPSynthesizer	core/WPSynthesizer.h	/^class WPSynthesizer : public QObject$/;"	c
WPTIMBRE_H	core/WPTimbre.h	2;"	d
WPTUNINGFORK_H	core/WPTuningFork.h	2;"	d
WPTimbre	core/WPTimbre.h	/^    WPTimbre()$/;"	f	class:WPTimbre
WPTimbre	core/WPTimbre.h	/^class WPTimbre$/;"	c
WPTuningFork	core/WPTuningFork.h	/^    WPTuningFork()$/;"	f	class:WPTuningFork
WPTuningFork	core/WPTuningFork.h	/^class WPTuningFork : public WPTimbre$/;"	c
WPVARTIMBRE_H	core/WPVarTimbre.h	2;"	d
WPVarTimbre	core/WPVarTimbre.h	/^    WPVarTimbre()$/;"	f	class:WPVarTimbre
WPVarTimbre	core/WPVarTimbre.h	/^class WPVarTimbre : public WPTimbre$/;"	c
WPWAVE_H	core/WPWave.h	2;"	d
WPWave	core/WPWave.cpp	/^WPWave::WPWave(QObject *parent) :$/;"	f	class:WPWave
WPWave	core/WPWave.cpp	/^WPWave::WPWave(WPWave &b) :$/;"	f	class:WPWave
WPWave	core/WPWave.cpp	/^WPWave::WPWave(const QByteArray &bytearray, const QAudioFormat &_format, QObject *parent) :$/;"	f	class:WPWave
WPWave	core/WPWave.cpp	/^WPWave::WPWave(const QVector<WaveDataType> &_data, const QAudioFormat &_format, QObject *parent) :$/;"	f	class:WPWave
WPWave	core/WPWave.h	/^class WPWave : public QObject$/;"	c
WaveDataType	core/WPWave.h	/^    typedef qint16 WaveDataType;$/;"	t	class:WPWave
Write	WPScore/[Token]selfplayer2.cpp	/^	void Write(FILE *fo, std::vector <int> v)$/;"	f	namespace:Player
X	WPScore/WPLib.h	/^		int X, Y;$/;"	m	class:Fraction
X	WPScore/[Token]selfplayer.cpp	/^		int X, Y;$/;"	m	struct:Player::TFrac	file:
Y	WPScore/WPLib.h	/^		int X, Y;$/;"	m	class:Fraction
Y	WPScore/[Token]selfplayer.cpp	/^		int X, Y;$/;"	m	struct:Player::TFrac	file:
_FFT	core/WPWave.cpp	/^int WPWave::_FFT(const std::complex<double> *begin, const std::complex<double> *end, QVector<std::complex<double> > &FFTout)$/;"	f	class:WPWave
_FFT	core/WPWave.cpp	/^void WPWave::_FFT()$/;"	f	class:WPWave
_Gabor	core/WPWave.cpp	/^void WPWave::_Gabor(const QVector<QVector<std::complex<double> > > &in, double sigma, int period, QVector<std::complex<double> > &out)$/;"	f	class:WPWave
_Gabor	core/WPWave.cpp	/^void WPWave::_Gabor(double sigma, int period)$/;"	f	class:WPWave
_STFT	core/WPWave.cpp	/^void WPWave::_STFT(const QVector<QVector<std::complex<double> > > &in, double *window, int width, int period, QVector<std::complex<double> > &out)$/;"	f	class:WPWave
_STFT	core/WPWave.cpp	/^void WPWave::_STFT(double *window, int width, int period)$/;"	f	class:WPWave
_WPALLOCATOR_H	WPScore/WPAllocator.h	2;"	d
_WPINTERVAL_H	WPScore/WPInterval.h	2;"	d
_WPLIB_H	WPScore/WPLib.h	2;"	d
_WPMULTINOTE_H	WPScore/WPMultinote.h	6;"	d
_WPNOTE_H	WPScore/WPNote.h	2;"	d
_WPPART_H	WPScore/WPPart.h	2;"	d
_WPPERSISTENTTREE_H	WPScore/WPPersistentTree.h	2;"	d
_WPPOSITION_H	WPScore/WPPosition.h	2;"	d
_WPPROPERTY_H	WPScore/WPProperty.h	2;"	d
_WPSCORE_H	WPScore/WPScore.h	2;"	d
addLine	myglwidget.cpp	/^void MyGLWidget::addLine(double x1, double y1, double x2, double y2, double _red, double _green, double _blue)$/;"	f	class:MyGLWidget
addLowerDot	musictextitem.cpp	/^void musicTextItem::addLowerDot(const int number)$/;"	f	class:musicTextItem
addPoint	myglwidget.cpp	/^void MyGLWidget::addPoint(double x, double y, double _red, double _green, double _blue)$/;"	f	class:MyGLWidget
addUpperDot	musictextitem.cpp	/^void musicTextItem::addUpperDot(const int number)$/;"	f	class:musicTextItem
append	core/WPWave.cpp	/^void WPWave::append(WPWave &b)$/;"	f	class:WPWave
arrangeDots	musictextitem.cpp	/^void musicTextItem::arrangeDots()$/;"	f	class:musicTextItem
arrangeLines	musicbaritem.cpp	/^void musicBarItem::arrangeLines()$/;"	f	class:musicBarItem
atEnd	core/WPPipe.h	/^    bool atEnd() const$/;"	f	class:WPPipe
audioinput	OscilloscopeWindow.h	/^    QAudioInput *audioinput;$/;"	m	class:OscilloscopeWindow
audiooutput	core/WPSynthesisController.h	/^    QAudioOutput *audiooutput;$/;"	m	class:WPSynthesisController
audiooutput	core/WPWave.h	/^    QAudioOutput *audiooutput;$/;"	m	class:WPWave
audiooutputStateChanged	core/WPWave.cpp	/^void WPWave::audiooutputStateChanged(QAudio::State state)$/;"	f	class:WPWave
b	myglwidget.h	/^    double l, r, b, t;$/;"	m	class:MyGLWidget
begin	WPScore/WPInterval.cpp	/^WPPosition WPInterval::begin() const$/;"	f	class:WPInterval
boundingRect	musicbaritem.cpp	/^QRectF musicBarItem::boundingRect() const$/;"	f	class:musicBarItem
boundingRect	musicbracketitem.cpp	/^QRectF musicBracketItem::boundingRect() const$/;"	f	class:musicBracketItem
boundingRect	musicdotitem.cpp	/^QRectF musicDotItem::boundingRect() const$/;"	f	class:musicDotItem
boundingRect	musictextitem.cpp	/^QRectF musicTextItem::boundingRect() const$/;"	f	class:musicTextItem
buffer	core/WPWave.h	/^    QBuffer *buffer;$/;"	m	class:WPWave
bufferfile	core/WPWave.h	/^    QFile *bufferfile;$/;"	m	class:WPWave
bytearray	core/WPWave.h	/^    QByteArray *bytearray;$/;"	m	class:WPWave
bytesAvailable	core/WPPipe.cpp	/^qint64 WPPipe::bytesAvailable() const$/;"	f	class:WPPipe
bytesToWrite	core/WPPipe.h	/^    qint64 bytesToWrite() const$/;"	f	class:WPPipe
calculate	musictextitem.cpp	/^qreal musicTextItem::calculate(int x)$/;"	f	class:musicTextItem
canReadLine	core/WPPipe.h	/^    bool canReadLine() const$/;"	f	class:WPPipe
cancelButton	getmusicinfodialog.h	/^    QPushButton *cancelButton;$/;"	m	class:getMusicInfoDialog
change	WPScore/WPMultinote.cpp	/^void WPMultinote::change(const WPMultinote &Mlt)$/;"	f	class:WPMultinote
change	WPScore/WPMultinote.cpp	/^void WPMultinote::change(const std::vector <WPNote> &Vector)$/;"	f	class:WPMultinote
channel	core/WPMixer.h	/^    WPPipe *channel;$/;"	m	class:WPMixer
chcnt	core/WPMixer.h	/^    int chcnt;$/;"	m	class:WPMixer
checkDef	core/WPPipe.cpp	/^inline void WPPipe::checkDef() const$/;"	f	class:WPPipe
checkSuf	core/WPPipe.cpp	/^inline void WPPipe::checkSuf() const$/;"	f	class:WPPipe
checkmax	WPScore/WPLib.h	/^template <class T> T checkmax(T &a, T b)$/;"	f
checkmin	WPScore/WPLib.h	/^template <class T> T checkmin(T &a, T b)$/;"	f
clapLength	musicbaritem.h	/^    qreal clapLength;$/;"	m	class:musicBarItem
cleanExit	WPScore/[Token]selfplayer2.cpp	/^	void cleanExit(char *str, ...)$/;"	f	namespace:Player
clear	core/WPPipe.cpp	/^void WPPipe::clear()$/;"	f	class:WPPipe
clear	core/WPWave.cpp	/^void WPWave::clear()$/;"	f	class:WPWave
clear	myglwidget.cpp	/^void MyGLWidget::clear()$/;"	f	class:MyGLWidget
closeEvent	mainwindow.cpp	/^void MainWindow::closeEvent(QCloseEvent *event)$/;"	f	class:MainWindow
closeInput	core/WPPipe.cpp	/^void WPPipe::closeInput()$/;"	f	class:WPPipe
copy	core/WPWave.cpp	/^void WPWave::copy(WPWave &b)$/;"	f	class:WPWave
countPartNumber	WPScore/WPScore.cpp	/^int WPScore::countPartNumber()$/;"	f	class:WPScore
createActions	mainwindow.cpp	/^void MainWindow::createActions()$/;"	f	class:MainWindow
createMenus	mainwindow.cpp	/^void MainWindow::createMenus()$/;"	f	class:MainWindow
createStatusBar	mainwindow.cpp	/^void MainWindow::createStatusBar()$/;"	f	class:MainWindow
createToolBar	mainwindow.cpp	/^void MainWindow::createToolBar()$/;"	f	class:MainWindow
created	getmusicinfodialog.h	/^    bool created;$/;"	m	class:getMusicInfoDialog
data	core/WPWave.h	/^    QVector<WaveDataType> data;$/;"	m	class:WPWave
decodeFinished	core/WPWave.cpp	/^void WPWave::decodeFinished()$/;"	f	class:WPWave
decoder	core/WPWave.h	/^    QAudioDecoder decoder;$/;"	m	class:WPWave
def	core/WPPipe.h	/^    qint64 def, suf;$/;"	m	class:WPPipe
defaultAudioFormat	core/WPWave.cpp	/^QAudioFormat WPWave::defaultAudioFormat()$/;"	f	class:WPWave
deleteNote	WPScore/WPMultinote.cpp	/^void WPMultinote::deleteNote(const WPNote &Nt)$/;"	f	class:WPMultinote
displayOrder	WPScore/WPPart.cpp	/^int WPPart::displayOrder()$/;"	f	class:WPPart
divideLabel	getmusicinfodialog.h	/^    QLabel *divideLabel;$/;"	m	class:getMusicInfoDialog
doEdit	getmusicinfodialog.h	/^    QLineEdit *doEdit;$/;"	m	class:getMusicInfoDialog
doLabel	getmusicinfodialog.h	/^    QLabel *doLabel;$/;"	m	class:getMusicInfoDialog
dotColor	musicdotitem.h	/^    QColor dotColor;$/;"	m	class:musicDotItem
dotRadius	musicdotitem.h	/^    qreal dotRadius;$/;"	m	class:musicDotItem
dotted	musictextitem.h	/^    bool dotted;$/;"	m	class:musicTextItem
down	musicbracketitem.h	/^    QPointF down;$/;"	m	class:musicBracketItem
drawLine	musicbaritem.cpp	/^musicLineItem *musicBarItem::drawLine(musicTextItem *left, musicTextItem *right, int level)$/;"	f	class:musicBarItem
drawMusic	mainwindow.cpp	/^void MainWindow::drawMusic()$/;"	f	class:MainWindow
end	WPScore/WPInterval.cpp	/^WPPosition WPInterval::end() const$/;"	f	class:WPInterval
errorv	WPScore/[Token]selfplayer2.cpp	/^	void errorv(char *str, va_list ap)$/;"	f	namespace:Player
file	core/WPSynthesisController.h	/^    QFile *file;$/;"	m	class:WPSynthesisController
fileMenu	mainwindow.h	/^    QMenu *fileMenu;$/;"	m	class:MainWindow
format	core/WPWave.h	/^    QAudioFormat format;$/;"	m	class:WPWave
getAllNotes	WPScore/WPPart.cpp	/^std::vector <WPMultinote> WPPart::getAllNotes()$/;"	f	class:WPPart
getArg	WPScore/WPProperty.cpp	/^std::string WPProperty::getArg() const$/;"	f	class:WPProperty
getCurrentVersion	WPScore/WPScore.cpp	/^int WPScore::getCurrentVersion() const$/;"	f	class:WPScore
getData	core/WPWave.cpp	/^const QVector<WPWave::WaveDataType> &WPWave::getData() const$/;"	f	class:WPWave
getFFTdata	core/WPWave.cpp	/^const QVector<std::complex<double> > &WPWave::getFFTdata() const$/;"	f	class:WPWave
getFrequency	WPScore/WPNote.cpp	/^double WPNote::getFrequency() const$/;"	f	class:WPNote
getFrequency	WPScore/WPNote.cpp	/^double WPNote::getFrequency(double *TuningFunction(int, int), int Base) const$/;"	f	class:WPNote
getInputChannel	core/WPMixer.cpp	/^WPPipe *WPMixer::getInputChannel(int num) const$/;"	f	class:WPMixer
getInterval	WPScore/WPProperty.cpp	/^WPInterval WPProperty::getInterval() const$/;"	f	class:WPProperty
getLength	WPScore/WPMultinote.cpp	/^Fraction WPMultinote::getLength() const$/;"	f	class:WPMultinote
getLength	WPScore/WPNote.cpp	/^Fraction WPNote::getLength() const$/;"	f	class:WPNote
getMultinotePersistentTreeNodeAllocator	WPScore/WPScore.cpp	/^WPAllocator <WPMultinotePersistentTreeNode> *WPScore::getMultinotePersistentTreeNodeAllocator()$/;"	f	class:WPScore
getMusicInfoDialog	getmusicinfodialog.cpp	/^getMusicInfoDialog::getMusicInfoDialog(QWidget *parent)$/;"	f	class:getMusicInfoDialog
getMusicInfoDialog	getmusicinfodialog.h	/^class getMusicInfoDialog : public QDialog$/;"	c
getMusicInformation	mainwindow.cpp	/^void MainWindow::getMusicInformation()$/;"	f	class:MainWindow
getName	WPScore/WPPart.cpp	/^std::string WPPart::getName()$/;"	f	class:WPPart
getNotes	WPScore/WPMultinote.cpp	/^std::vector <WPNote> WPMultinote::getNotes()$/;"	f	class:WPMultinote
getNumPoints	myglwidget.cpp	/^int MyGLWidget::getNumPoints() const$/;"	f	class:MyGLWidget
getPartByOrder	WPScore/WPScore.cpp	/^WPPart *WPScore::getPartByOrder(const int &K)$/;"	f	class:WPScore
getPartList	WPScore/WPScore.cpp	/^std::vector <WPPart> &WPScore::getPartList()$/;"	f	class:WPScore
getPitch	WPScore/WPNote.cpp	/^int WPNote::getPitch() const$/;"	f	class:WPNote
getPropertyPersistentTreeNodeAllocator	WPScore/WPScore.cpp	/^WPAllocator <WPPropertyPersistentTreeNode> *WPScore::getPropertyPersistentTreeNodeAllocator()$/;"	f	class:WPScore
getSTFTdata	core/WPWave.cpp	/^const QVector<QVector<std::complex<double> > > &WPWave::getSTFTdata() const$/;"	f	class:WPWave
getTimeSpan	WPScore/WPNote.cpp	/^double WPNote::getTimeSpan() const$/;"	f	class:WPNote
getType	WPScore/WPProperty.cpp	/^WPProperty::WPPropertyType WPProperty::getType() const$/;"	f	class:WPProperty
getValue	WPScore/WPPosition.cpp	/^Fraction WPPosition::getValue() const$/;"	f	class:WPPosition
hideEvent	OscilloscopeWindow.cpp	/^void OscilloscopeWindow::hideEvent(QHideEvent *)$/;"	f	class:OscilloscopeWindow
implementVersion	WPScore/WPPart.cpp	/^void WPPart::implementVersion()$/;"	f	class:WPPart
initializeGL	core/WPOscilloscope.cpp	/^void WPOscilloscope::initializeGL()$/;"	f	class:WPOscilloscope
initializeGL	myglwidget.cpp	/^void MyGLWidget::initializeGL()$/;"	f	class:MyGLWidget
inputdevice	core/WPOscilloscope.h	/^    QIODevice *inputdevice;$/;"	m	class:WPOscilloscope
insert	WPScore/WPPersistentTree.cpp	/^void WPMultinotePersistentTree::insert(const WPPosition &P, const WPMultinote &Nt)$/;"	f	class:WPMultinotePersistentTree
insert	WPScore/WPPersistentTree.cpp	/^void WPPropertyPersistentTree::insert(const WPProperty &P)$/;"	f	class:WPPropertyPersistentTree
insertMultinote	WPScore/WPPart.cpp	/^void WPPart::insertMultinote(const WPPosition &P, const WPMultinote &N)$/;"	f	class:WPPart
insertNote	WPScore/WPMultinote.cpp	/^void WPMultinote::insertNote(const WPNote &Nt)$/;"	f	class:WPMultinote
insertProperties	WPScore/WPPart.cpp	/^void WPPart::insertProperties(const WPProperty &P)$/;"	f	class:WPPart
interpolate	core/WPTimbre.h	/^    static double interpolate(double *f, double t)$/;"	f	class:WPTimbre
interval	musictextitem.cpp	/^qreal musicTextItem::interval()$/;"	f	class:musicTextItem
interval	musictextitem.h	/^    qreal interval;$/;"	m	class:musicTextItem
isClosing	core/WPPipe.cpp	/^bool WPPipe::isClosing() const$/;"	f	class:WPPipe
isSequential	core/WPPipe.h	/^    bool isSequential() const$/;"	f	class:WPPipe
isToBePlayed	WPScore/WPPart.cpp	/^bool WPPart::isToBePlayed()$/;"	f	class:WPPart
isclosing	core/WPPipe.h	/^    bool isclosing; \/\/correspond to closeInput();$/;"	m	class:WPPipe
itemChange	musictextitem.cpp	/^QVariant musicTextItem::itemChange(GraphicsItemChange change, const QVariant &value)$/;"	f	class:musicTextItem
l	myglwidget.h	/^    double l, r, b, t;$/;"	m	class:MyGLWidget
lblue	myglwidget.h	/^    QVector<double> pred, pgreen, pblue, lred, lgreen, lblue;$/;"	m	class:MyGLWidget
lcnt	myglwidget.h	/^    int lcnt;$/;"	m	class:MyGLWidget
length	core/WPOscilloscope.h	/^    quint32 period, length;$/;"	m	class:WPOscilloscope
length	musictextitem.cpp	/^qreal musicTextItem::length()$/;"	f	class:musicTextItem
lengthen	WPScore/WPInterval.cpp	/^void WPInterval::lengthen(const Fraction &L)$/;"	f	class:WPInterval
lengthen	WPScore/WPProperty.cpp	/^void WPProperty::lengthen(const Fraction &F)$/;"	f	class:WPProperty
lgreen	myglwidget.h	/^    QVector<double> pred, pgreen, pblue, lred, lgreen, lblue;$/;"	m	class:MyGLWidget
lines	musicbaritem.h	/^    QSet <musicLineItem *> lines;$/;"	m	class:musicBarItem
lines	musictextitem.cpp	/^int musicTextItem::lines()$/;"	f	class:musicTextItem
lines	musictextitem.h	/^    QVector <musicLineItem *> lines;$/;"	m	class:musicTextItem
load	WPScore/WPScore.cpp	/^void WPScore::load(const std::string &FileName)$/;"	f	class:WPScore
loadTimbre	core/WPSynthesizer.cpp	/^void WPSynthesizer::loadTimbre(const WPTimbre *_timbre)$/;"	f	class:WPSynthesizer
lock	core/WPPipe.h	/^    QMutex lock; \/\/make sure to resopnd to sufficientInput() to prevent writeData(...,...) keeping the lock locked$/;"	m	class:WPPipe
lowerDots	musictextitem.h	/^    QSet <musicDotItem *> lowerDots;$/;"	m	class:musicTextItem
lred	myglwidget.h	/^    QVector<double> pred, pgreen, pblue, lred, lgreen, lblue;$/;"	m	class:MyGLWidget
lx1	myglwidget.h	/^    QVector<double> px, py, lx1, ly1, lx2, ly2;$/;"	m	class:MyGLWidget
lx2	myglwidget.h	/^    QVector<double> px, py, lx1, ly1, lx2, ly2;$/;"	m	class:MyGLWidget
ly1	myglwidget.h	/^    QVector<double> px, py, lx1, ly1, lx2, ly2;$/;"	m	class:MyGLWidget
ly2	myglwidget.h	/^    QVector<double> px, py, lx1, ly1, lx2, ly2;$/;"	m	class:MyGLWidget
main	WPScore/[Token]selfplayer2.cpp	/^int main(int argc, char **argv)$/;"	f
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
maxWaveDataType	core/WPWave.h	/^    static const WaveDataType maxWaveDataType = 32767, minWaveDataType = -32768;$/;"	m	class:WPWave
minWaveDataType	core/WPWave.h	/^    static const WaveDataType maxWaveDataType = 32767, minWaveDataType = -32768;$/;"	m	class:WPWave
mixWith	core/WPWave.cpp	/^void WPWave::mixWith(double ra, const WPWave &b, double rb)$/;"	f	class:WPWave
mixer	core/WPSynthesisController.h	/^    WPMixer *mixer;$/;"	m	class:WPSynthesisController
mother	getmusicinfodialog.h	/^    QString mother;$/;"	m	class:getMusicInfoDialog
motherEdit	getmusicinfodialog.h	/^    QLineEdit *motherEdit;$/;"	m	class:getMusicInfoDialog
musicArcItem	musicarcitem.cpp	/^musicArcItem::musicArcItem(QPointF start, QPointF end, QGraphicsItem *parent)$/;"	f	class:musicArcItem
musicArcItem	musicarcitem.h	/^class musicArcItem : public QGraphicsPathItem$/;"	c
musicBarItem	musicbaritem.cpp	/^musicBarItem::musicBarItem(QList <musicTextItem *> tune) : numbers(tune), clapLength(1)$/;"	f	class:musicBarItem
musicBarItem	musicbaritem.h	/^class musicBarItem : public QGraphicsItem$/;"	c
musicBracketItem	musicbracketitem.cpp	/^musicBracketItem::musicBracketItem(QPointF inputup, QPointF inputdown,$/;"	f	class:musicBracketItem
musicBracketItem	musicbracketitem.h	/^class musicBracketItem : public QGraphicsItem$/;"	c
musicDotItem	musicdotitem.cpp	/^musicDotItem::musicDotItem()$/;"	f	class:musicDotItem
musicDotItem	musicdotitem.h	/^class musicDotItem : public QGraphicsItem$/;"	c
musicHeight	musictextitem.h	/^    QChar musicHeight;$/;"	m	class:musicTextItem
musicLineItem	musiclineitem.cpp	/^musicLineItem::musicLineItem()$/;"	f	class:musicLineItem
musicLineItem	musiclineitem.h	/^class musicLineItem : public QGraphicsLineItem$/;"	c
musicScene	musicscene.cpp	/^musicScene::musicScene(QWidget *parent)$/;"	f	class:musicScene
musicScene	musicscene.h	/^class musicScene : public QGraphicsScene$/;"	c
musicTextItem	musictextitem.cpp	/^musicTextItem::musicTextItem(const QChar &number)$/;"	f	class:musicTextItem
musicTextItem	musictextitem.h	/^class musicTextItem : public QGraphicsItem$/;"	c
name	getmusicinfodialog.h	/^    QString name;$/;"	m	class:getMusicInfoDialog
nameEdit	getmusicinfodialog.h	/^    QLineEdit *nameEdit;$/;"	m	class:getMusicInfoDialog
nameLabel	getmusicinfodialog.h	/^    QLabel *nameLabel;$/;"	m	class:getMusicInfoDialog
newAction	mainwindow.h	/^    QAction *newAction;$/;"	m	class:MainWindow
newPart	WPScore/WPScore.cpp	/^WPPart *WPScore::newPart()$/;"	f	class:WPScore
newPart	WPScore/WPScore.cpp	/^WPPart *WPScore::newPart(std::string S)$/;"	f	class:WPScore
newVersion	WPScore/WPPart.cpp	/^void WPPart::newVersion()$/;"	f	class:WPPart
newVersion	WPScore/WPScore.cpp	/^int WPScore::newVersion()$/;"	f	class:WPScore
newthread	core/WPSynthesizer.h	/^    QTimer *newthread;$/;"	m	class:WPSynthesizer
nextFragment	WPScore/WPPart.cpp	/^std::pair < WPMultinote, std::pair < std::vector <WPProperty>, std::vector <WPProperty> > > WPPart::nextFragment()$/;"	f	class:WPPart
numberColor	musictextitem.h	/^    QColor numberColor;$/;"	m	class:musicTextItem
numberFont	musictextitem.h	/^    QFont numberFont;$/;"	m	class:musicTextItem
numbers	musicbaritem.h	/^    QList <musicTextItem *> numbers;$/;"	m	class:musicBarItem
open	core/WPPipe.cpp	/^bool WPPipe::open(OpenMode mode)$/;"	f	class:WPPipe
openInputChannels	core/WPMixer.cpp	/^bool WPMixer::openInputChannels(int number_of_channels)$/;"	f	class:WPMixer
operator +	WPScore/WPLib.cpp	/^Fraction Fraction::operator + (const Fraction &F) const$/;"	f	class:Fraction
operator +	WPScore/WPPosition.cpp	/^WPPosition WPPosition::operator + (const Fraction &F) const$/;"	f	class:WPPosition
operator +=	WPScore/WPLib.cpp	/^Fraction Fraction::operator += (const Fraction &F)$/;"	f	class:Fraction
operator +=	WPScore/WPPosition.cpp	/^WPPosition WPPosition::operator += (const Fraction &F)$/;"	f	class:WPPosition
operator -	WPScore/WPLib.cpp	/^Fraction Fraction::operator - (const Fraction &F) const$/;"	f	class:Fraction
operator -=	WPScore/WPLib.cpp	/^Fraction Fraction::operator -= (const Fraction &F)$/;"	f	class:Fraction
operator <	WPScore/WPLib.cpp	/^bool Fraction::operator < (const Fraction &F) const$/;"	f	class:Fraction
operator <	WPScore/WPPosition.cpp	/^bool WPPosition::operator < (const WPPosition &F) const$/;"	f	class:WPPosition
operator <=	WPScore/WPLib.cpp	/^bool Fraction::operator <= (const Fraction &F) const$/;"	f	class:Fraction
operator <=	WPScore/WPPosition.cpp	/^bool WPPosition::operator <= (const WPPosition &F) const$/;"	f	class:WPPosition
operator =	WPScore/WPLib.cpp	/^Fraction Fraction::operator = (const Fraction &F)$/;"	f	class:Fraction
operator =	WPScore/WPPosition.cpp	/^WPPosition WPPosition::operator = (const Fraction &F)$/;"	f	class:WPPosition
operator ==	WPScore/WPLib.cpp	/^bool Fraction::operator == (const Fraction &F) const$/;"	f	class:Fraction
operator ==	WPScore/WPNote.cpp	/^bool WPNote::operator == (const WPNote &Nt) const$/;"	f	class:WPNote
operator >	WPScore/WPLib.cpp	/^bool Fraction::operator > (const Fraction &F) const$/;"	f	class:Fraction
operator >	WPScore/WPPosition.cpp	/^bool WPPosition::operator > (const WPPosition &F) const$/;"	f	class:WPPosition
operator >=	WPScore/WPLib.cpp	/^bool Fraction::operator >= (const Fraction &F) const$/;"	f	class:Fraction
operator >=	WPScore/WPPosition.cpp	/^bool WPPosition::operator >= (const WPPosition &F) const$/;"	f	class:WPPosition
oscilloscope	OscilloscopeWindow.h	/^    WPOscilloscope oscilloscope;$/;"	m	class:OscilloscopeWindow
oscilloscopeAction	mainwindow.h	/^    QAction *oscilloscopeAction;$/;"	m	class:MainWindow
oscilloscopeWindow	mainwindow.h	/^    OscilloscopeWindow *oscilloscopeWindow;$/;"	m	class:MainWindow
outpipe	core/WPSynthesisController.h	/^    WPPipe *outpipe;$/;"	m	class:WPSynthesisController
output	core/WPMixer.h	/^    QIODevice *output;$/;"	m	class:WPMixer
output	core/WPSynthesizer.h	/^    QIODevice *output;$/;"	m	class:WPSynthesizer
paint	musicbaritem.cpp	/^void musicBarItem::paint(QPainter *painter,$/;"	f	class:musicBarItem
paint	musicbracketitem.cpp	/^void musicBracketItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option,$/;"	f	class:musicBracketItem
paint	musicdotitem.cpp	/^void musicDotItem::paint(QPainter *painter,$/;"	f	class:musicDotItem
paint	musictextitem.cpp	/^void musicTextItem::paint(QPainter *painter,$/;"	f	class:musicTextItem
paintGL	core/WPOscilloscope.cpp	/^void WPOscilloscope::paintGL()$/;"	f	class:WPOscilloscope
paintGL	myglwidget.cpp	/^void MyGLWidget::paintGL()$/;"	f	class:MyGLWidget
part	core/WPSynthesizer.h	/^    WPPart *part;$/;"	m	class:WPSynthesizer
pblue	myglwidget.h	/^    QVector<double> pred, pgreen, pblue, lred, lgreen, lblue;$/;"	m	class:MyGLWidget
pcnt	myglwidget.h	/^    int pcnt;$/;"	m	class:MyGLWidget
period	core/WPOscilloscope.h	/^    quint32 period, length;$/;"	m	class:WPOscilloscope
pgreen	myglwidget.h	/^    QVector<double> pred, pgreen, pblue, lred, lgreen, lblue;$/;"	m	class:MyGLWidget
pi	WPScore/[Token]selfplayer2.cpp	25;"	d	file:
pii	WPScore/[Token]selfplayer.cpp	24;"	d	file:
pii	WPScore/[Token]selfplayer2.cpp	27;"	d	file:
pipe	OscilloscopeWindow.h	/^    WPPipe *pipe;$/;"	m	class:OscilloscopeWindow
play	core/WPWave.cpp	/^bool WPWave::play()$/;"	f	class:WPWave
player	core/WPWave.h	/^    QMediaPlayer *player;$/;"	m	class:WPWave
pred	myglwidget.h	/^    QVector<double> pred, pgreen, pblue, lred, lgreen, lblue;$/;"	m	class:MyGLWidget
pushLines	musictextitem.cpp	/^void musicTextItem::pushLines(musicLineItem *line, int level)$/;"	f	class:musicTextItem
px	myglwidget.h	/^    QVector<double> px, py, lx1, ly1, lx2, ly2;$/;"	m	class:MyGLWidget
py	myglwidget.h	/^    QVector<double> px, py, lx1, ly1, lx2, ly2;$/;"	m	class:MyGLWidget
que	core/WPPipe.h	/^    std::deque<QByteArray *> que;$/;"	m	class:WPPipe
query	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTree WPPropertyPersistentTree::query(const WPInterval &I)$/;"	f	class:WPPropertyPersistentTree
query	WPScore/WPPersistentTree.cpp	/^std::pair <Fraction, WPMultinote> WPMultinotePersistentTree::query(const WPPosition &P)$/;"	f	class:WPMultinotePersistentTree
quesize	core/WPPipe.h	/^    qint64 quesize, readpos;$/;"	m	class:WPPipe
r	myglwidget.h	/^    double l, r, b, t;$/;"	m	class:MyGLWidget
radius	musicdotitem.cpp	/^qreal musicDotItem::radius()$/;"	f	class:musicDotItem
ran	WPScore/WPLib.cpp	/^int ran()$/;"	f
readBuffer	core/WPWave.cpp	/^void WPWave::readBuffer()$/;"	f	class:WPWave
readData	core/WPPipe.cpp	/^qint64 WPPipe::readData(char *data, qint64 maxlen)$/;"	f	class:WPPipe
readFile	core/WPWave.cpp	/^void WPWave::readFile(QString filename)$/;"	f	class:WPWave
readSettings	mainwindow.cpp	/^void MainWindow::readSettings()$/;"	f	class:MainWindow
readlength	core/WPMixer.h	/^    quint64 readlength; \/\/in number of samples$/;"	m	class:WPMixer
readpos	core/WPPipe.h	/^    qint64 quesize, readpos;$/;"	m	class:WPPipe
recycle	core/WPSynthesisController.cpp	/^void WPSynthesisController::recycle()$/;"	f	class:WPSynthesisController
redo	WPScore/WPScore.cpp	/^int WPScore::redo()$/;"	f	class:WPScore
refresh	core/WPOscilloscope.cpp	/^void WPOscilloscope::refresh()$/;"	f	class:WPOscilloscope
remove	WPScore/WPPersistentTree.cpp	/^void WPMultinotePersistentTree::remove(const WPInterval &I)$/;"	f	class:WPMultinotePersistentTree
removeLine	musicbaritem.cpp	/^void musicBarItem::removeLine(musicLineItem *line)$/;"	f	class:musicBarItem
removeLines	musicbaritem.cpp	/^void musicBarItem::removeLines()$/;"	f	class:musicBarItem
removeLowerDot	musictextitem.cpp	/^void musicTextItem::removeLowerDot()$/;"	f	class:musicTextItem
removeUpperDot	musictextitem.cpp	/^void musicTextItem::removeUpperDot()$/;"	f	class:musicTextItem
reset	musicbaritem.cpp	/^musicBarItem::reset(QList<musicTextItem *> tune)$/;"	f	class:musicBarItem
resizeEvent	OscilloscopeWindow.cpp	/^void OscilloscopeWindow::resizeEvent(QResizeEvent *)$/;"	f	class:OscilloscopeWindow
resizeGL	core/WPOscilloscope.cpp	/^void WPOscilloscope::resizeGL(int w, int h)$/;"	f	class:WPOscilloscope
resizeGL	myglwidget.cpp	/^void MyGLWidget::resizeGL(int w, int h)$/;"	f	class:MyGLWidget
save	WPScore/WPScore.cpp	/^void WPScore::save(const std::string &FileName)$/;"	f	class:WPScore
scene	mainwindow.h	/^    musicScene *scene;$/;"	m	class:MainWindow
score	OscilloscopeWindow.h	/^    WPScore *score;$/;"	m	class:OscilloscopeWindow
sdata	core/WPMixer.h	/^    WPWave::WaveDataType *sdata, *tdata;$/;"	m	class:WPMixer
setClap	musicbaritem.cpp	/^void musicBarItem::setClap(const qreal length)$/;"	f	class:musicBarItem
setColor	musicdotitem.cpp	/^void musicDotItem::setColor(const QColor &color)$/;"	f	class:musicDotItem
setColor	musiclineitem.cpp	/^void musicLineItem::setColor(const QColor &color)$/;"	f	class:musicLineItem
setColor	musictextitem.cpp	/^void musicTextItem::setColor(const QColor &color)$/;"	f	class:musicTextItem
setData	core/WPWave.cpp	/^void WPWave::setData(const QByteArray &bytearray)$/;"	f	class:WPWave
setData	core/WPWave.cpp	/^void WPWave::setData(const QVector<WaveDataType> &_data)$/;"	f	class:WPWave
setDotted	musictextitem.cpp	/^void musicTextItem::setDotted(bool dot)$/;"	f	class:musicTextItem
setFont	musictextitem.cpp	/^void musicTextItem::setFont(const QFont &font)$/;"	f	class:musicTextItem
setFormat	core/WPWave.cpp	/^void WPWave::setFormat(const QAudioFormat &_format)$/;"	f	class:WPWave
setInputDevice	core/WPOscilloscope.cpp	/^void WPOscilloscope::setInputDevice(QIODevice &_inputdevice)$/;"	f	class:WPOscilloscope
setInterval	musictextitem.cpp	/^void musicTextItem::setInterval(const qreal inter)$/;"	f	class:musicTextItem
setLength	WPScore/WPMultinote.cpp	/^void WPMultinote::setLength(const Fraction &L)$/;"	f	class:WPMultinote
setLength	WPScore/WPNote.cpp	/^void WPNote::setLength(const Fraction &L)$/;"	f	class:WPNote
setLines	musictextitem.cpp	/^void musicTextItem::setLines(const int line)$/;"	f	class:musicTextItem
setOrder	WPScore/WPPart.cpp	/^void WPPart::setOrder(const int &K)$/;"	f	class:WPPart
setOutput	core/WPMixer.cpp	/^void WPMixer::setOutput(QIODevice &_output)$/;"	f	class:WPMixer
setOutputDevice	core/WPSynthesizer.cpp	/^void WPSynthesizer::setOutputDevice(QIODevice &_output)$/;"	f	class:WPSynthesizer
setRadius	musicdotitem.cpp	/^void musicDotItem::setRadius(const qreal radius)$/;"	f	class:musicDotItem
setRange	myglwidget.cpp	/^void MyGLWidget::setRange(double _l, double _r, double _b, double _t)$/;"	f	class:MyGLWidget
setReadLength	core/WPMixer.cpp	/^void WPMixer::setReadLength(quint64 length)$/;"	f	class:WPMixer
setThresholds	core/WPPipe.cpp	/^void WPPipe::setThresholds(qint64 _def, qint64 _suf)$/;"	f	class:WPPipe
setToBeMuted	WPScore/WPPart.cpp	/^void WPPart::setToBeMuted()$/;"	f	class:WPPart
setToBePlayed	WPScore/WPPart.cpp	/^void WPPart::setToBePlayed()$/;"	f	class:WPPart
setWatingTime	core/WPMixer.cpp	/^void WPMixer::setWatingTime(int msec)$/;"	f	class:WPMixer
shiftRight	WPScore/WPInterval.cpp	/^void WPInterval::shiftRight(const Fraction &L)$/;"	f	class:WPInterval
shiftRight	WPScore/WPProperty.cpp	/^void WPProperty::shiftRight(const Fraction &F)$/;"	f	class:WPProperty
showEvent	OscilloscopeWindow.cpp	/^void OscilloscopeWindow::showEvent(QShowEvent *)$/;"	f	class:OscilloscopeWindow
showMusic	mainwindow.cpp	/^void MainWindow::showMusic()$/;"	f	class:MainWindow
showOscilloscope	mainwindow.cpp	/^void MainWindow::showOscilloscope()$/;"	f	class:MainWindow
son	getmusicinfodialog.h	/^    QString son;$/;"	m	class:getMusicInfoDialog
sonEdit	getmusicinfodialog.h	/^    QLineEdit *sonEdit;$/;"	m	class:getMusicInfoDialog
start	core/WPMixer.cpp	/^void WPMixer::start()$/;"	f	class:WPMixer
start	core/WPOscilloscope.cpp	/^void WPOscilloscope::start(quint32 _period, quint32 _length)$/;"	f	class:WPOscilloscope
startFrom	WPScore/WPPart.cpp	/^std::pair < Fraction, std::vector <WPProperty> > WPPart::startFrom(const WPPosition &P)$/;"	f	class:WPPart
startSynthesis	core/WPSynthesizer.cpp	/^void WPSynthesizer::startSynthesis(WPPart &_part)$/;"	f	class:WPSynthesizer
stop	core/WPWave.cpp	/^void WPWave::stop()$/;"	f	class:WPWave
suf	core/WPPipe.h	/^    qint64 def, suf;$/;"	m	class:WPPipe
sumUp	core/WPMixer.cpp	/^void WPMixer::sumUp()$/;"	f	class:WPMixer
switchVersion	WPScore/WPScore.cpp	/^void WPScore::switchVersion(const int &V)$/;"	f	class:WPScore
synchronizeWithMaster	WPScore/WPPart.cpp	/^void WPPart::synchronizeWithMaster()$/;"	f	class:WPPart
synthesisFinished	core/WPSynthesisController.cpp	/^void WPSynthesisController::synthesisFinished()$/;"	f	class:WPSynthesisController
synthesize	core/WPSynthesisController.cpp	/^QIODevice *WPSynthesisController::synthesize(WPScore &score)$/;"	f	class:WPSynthesisController
synthesize	core/WPSynthesizer.cpp	/^WPWave *WPSynthesizer::synthesize(WPNote &note)$/;"	f	class:WPSynthesizer
synthesize	core/WPTuningFork.h	/^    WPWave *synthesize(double dur, double *amp, double *freq) const$/;"	f	class:WPTuningFork
synthesizeAndPlay	core/WPSynthesisController.cpp	/^void WPSynthesisController::synthesizeAndPlay(WPScore &score)$/;"	f	class:WPSynthesisController
synthesizePart	core/WPSynthesizer.cpp	/^void WPSynthesizer::synthesizePart()$/;"	f	class:WPSynthesizer
synthesizer	core/WPSynthesisController.h	/^    WPSynthesizer *synthesizer;$/;"	m	class:WPSynthesisController
t	myglwidget.h	/^    double l, r, b, t;$/;"	m	class:MyGLWidget
tdata	core/WPMixer.h	/^    WPWave::WaveDataType *sdata, *tdata;$/;"	m	class:WPMixer
thisLine	musictextitem.cpp	/^musicTextItem *thisLine(int level)$/;"	f
timbre	core/WPSynthesizer.h	/^    const WPTimbre *timbre;$/;"	m	class:WPSynthesizer
timer	core/WPMixer.h	/^    QTimer timer;$/;"	m	class:WPMixer
timer	core/WPOscilloscope.h	/^    QTimer *timer;$/;"	m	class:WPOscilloscope
toDouble	WPScore/WPLib.cpp	/^double Fraction::toDouble() const$/;"	f	class:Fraction
toolBar	mainwindow.h	/^    QToolBar *toolBar;$/;"	m	class:MainWindow
toolsMenu	mainwindow.h	/^    QMenu *toolsMenu;$/;"	m	class:MainWindow
tr	WPScore/[Token]selfplayer.cpp	23;"	d	file:
tr	WPScore/[Token]selfplayer2.cpp	26;"	d	file:
traverse	WPScore/WPPersistentTree.cpp	/^std::vector <WPMultinote> WPMultinotePersistentTree::traverse()$/;"	f	class:WPMultinotePersistentTree
traverse	WPScore/WPPersistentTree.cpp	/^std::vector <WPProperty> WPPropertyPersistentTree::traverse()$/;"	f	class:WPPropertyPersistentTree
truncateAdd	core/WPMixer.cpp	/^void WPMixer::truncateAdd(WPWave::WaveDataType &a, WPWave::WaveDataType b)$/;"	f	class:WPMixer
truncateWaveData	core/WPSynthesizer.cpp	/^WPWave::WaveDataType WPSynthesizer::truncateWaveData(double x)$/;"	f	class:WPSynthesizer
tune	getmusicinfodialog.h	/^    QString tune;$/;"	m	class:getMusicInfoDialog
ui	OscilloscopeWindow.h	/^    Ui::OscilloscopeWindow *ui;$/;"	m	class:OscilloscopeWindow
undo	WPScore/WPScore.cpp	/^int WPScore::undo()$/;"	f	class:WPScore
up	musicbracketitem.h	/^    QPointF up;$/;"	m	class:musicBracketItem
upperDots	musictextitem.h	/^    QSet <musicDotItem *> upperDots;$/;"	m	class:musicTextItem
view	mainwindow.h	/^    QGraphicsView *view;$/;"	m	class:MainWindow
waitingtime	core/WPMixer.h	/^    int waitingtime;$/;"	m	class:WPMixer
wave	OscilloscopeWindow.h	/^    WPWave wave;$/;"	m	class:OscilloscopeWindow
wave	core/WPOscilloscope.h	/^    WPWave wave;$/;"	m	class:WPOscilloscope
waveDecodeFinished	OscilloscopeWindow.cpp	/^void OscilloscopeWindow::waveDecodeFinished()$/;"	f	class:OscilloscopeWindow
writeData	core/WPPipe.cpp	/^qint64 WPPipe::writeData(const char *data, qint64 maxlen)$/;"	f	class:WPPipe
writeSettings	mainwindow.cpp	/^void MainWindow::writeSettings()$/;"	f	class:MainWindow
yesButton	getmusicinfodialog.h	/^    QPushButton *yesButton;$/;"	m	class:getMusicInfoDialog
yesClicked	getmusicinfodialog.cpp	/^void getMusicInfoDialog::yesClicked()$/;"	f	class:getMusicInfoDialog
~Fraction	WPScore/WPLib.cpp	/^Fraction::~Fraction()$/;"	f	class:Fraction
~MyGLWidget	myglwidget.cpp	/^MyGLWidget::~MyGLWidget()$/;"	f	class:MyGLWidget
~OscilloscopeWindow	OscilloscopeWindow.cpp	/^OscilloscopeWindow::~OscilloscopeWindow()$/;"	f	class:OscilloscopeWindow
~WPAllocator	WPScore/WPAllocator.h	/^template <class T> WPAllocator <T>::~WPAllocator()$/;"	f	class:WPAllocator
~WPInterval	WPScore/WPInterval.cpp	/^WPInterval::~WPInterval()$/;"	f	class:WPInterval
~WPMixer	core/WPMixer.cpp	/^WPMixer::~WPMixer()$/;"	f	class:WPMixer
~WPMultinote	WPScore/WPMultinote.cpp	/^WPMultinote::~WPMultinote()$/;"	f	class:WPMultinote
~WPMultinotePersistentTree	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTree::~WPMultinotePersistentTree()$/;"	f	class:WPMultinotePersistentTree
~WPMultinotePersistentTreeNode	WPScore/WPPersistentTree.cpp	/^WPMultinotePersistentTreeNode::~WPMultinotePersistentTreeNode()$/;"	f	class:WPMultinotePersistentTreeNode
~WPNote	WPScore/WPNote.cpp	/^WPNote::~WPNote ()$/;"	f	class:WPNote
~WPOscilloscope	core/WPOscilloscope.cpp	/^WPOscilloscope::~WPOscilloscope()$/;"	f	class:WPOscilloscope
~WPPart	WPScore/WPPart.cpp	/^WPPart::~WPPart ()$/;"	f	class:WPPart
~WPPersistentTree	WPScore/WPPersistentTree.cpp	/^WPPersistentTree::~WPPersistentTree()$/;"	f	class:WPPersistentTree
~WPPipe	core/WPPipe.cpp	/^WPPipe::~WPPipe()$/;"	f	class:WPPipe
~WPPosition	WPScore/WPPosition.cpp	/^WPPosition::~WPPosition()$/;"	f	class:WPPosition
~WPProperty	WPScore/WPProperty.cpp	/^WPProperty::~WPProperty()$/;"	f	class:WPProperty
~WPPropertyPersistentTree	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTree::~WPPropertyPersistentTree()$/;"	f	class:WPPropertyPersistentTree
~WPPropertyPersistentTreeNode	WPScore/WPPersistentTree.cpp	/^WPPropertyPersistentTreeNode::~WPPropertyPersistentTreeNode()$/;"	f	class:WPPropertyPersistentTreeNode
~WPScore	WPScore/WPScore.cpp	/^WPScore::~WPScore()$/;"	f	class:WPScore
~WPSynthesisController	core/WPSynthesisController.cpp	/^WPSynthesisController::~WPSynthesisController()$/;"	f	class:WPSynthesisController
~WPSynthesizer	core/WPSynthesizer.cpp	/^WPSynthesizer::~WPSynthesizer()$/;"	f	class:WPSynthesizer
~musicDotItem	musicdotitem.cpp	/^musicDotItem::~musicDotItem()$/;"	f	class:musicDotItem
~musicLineItem	musiclineitem.cpp	/^musicLineItem::~musicLineItem()$/;"	f	class:musicLineItem
~musicTextItem	musictextitem.cpp	/^musicTextItem::~musicTextItem()$/;"	f	class:musicTextItem
